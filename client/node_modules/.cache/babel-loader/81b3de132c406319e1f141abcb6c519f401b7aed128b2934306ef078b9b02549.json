{"ast":null,"code":"var _jsxFileName = \"/media/nvme0n1p3/My Projects/Full_Stack/Auth/front-end/src/pages/UserInfoPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useToken } from '../auth/useToken';\nimport { useUser } from '../auth/useUser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserInfoPage = () => {\n  _s();\n  const [, setToken] = useToken();\n  const [user] = useUser();\n  const {\n    id,\n    username,\n    email\n  } = user;\n\n  // We'll use the navigate function to navigate the user\n  // programmatically later on (we're not using it yet)\n  const navigate = useNavigate();\n\n  // These states are bound to the values of the text inputs\n  // on the page (see JSX below).\n  const [inputUsername, setInputUsername] = useState(username);\n  const [inputEmail, setInputEmail] = useState(email);\n\n  // These state variables control whether or not we show\n  // the success and error message sections after making\n  // a network request (see JSX below).\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n\n  // This useEffect hook automatically hides the\n  // success and error messages after 3 seconds when they're shown.\n  // Just a little user interface improvement.\n  useEffect(() => {\n    if (showSuccessMessage || showErrorMessage) {\n      setTimeout(() => {\n        setShowSuccessMessage(false);\n        setShowErrorMessage(false);\n      }, 3000);\n    }\n  }, [showSuccessMessage, showErrorMessage]);\n  const saveChanges = async () => {\n    try {\n      const response = await fetch(`/api/users/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          username: inputUsername,\n          email: inputEmail\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const logOut = () => {\n    // We'll want to log the user out here\n    // and send them to the \"login page\"\n    setToken(null);\n    navigate('/login');\n  };\n  const resetValues = () => {\n    // Reset the text input values to\n    // their starting values (the data we loaded from the server)\n    setInputUsername(username);\n    setInputEmail(email);\n    setInputPassword(password);\n  };\n\n  // And here we have the JSX for our component. It's pretty straightforward\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: [\"Info for \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), showSuccessMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success\",\n      children: \"Successfully saved user data!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), showErrorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fail\",\n      children: \"Uh oh... something went wrong and we couldn't save changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        saveChanges();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setInputUsername(e.target.value),\n          value: inputUsername,\n          type: \"text\",\n          placeholder: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setInputEmail(e.target.value),\n          value: inputEmail,\n          type: \"email\",\n          placeholder: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: resetValues,\n        children: \"Reset Values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: logOut,\n        children: \"Log Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(UserInfoPage, \"vGcphUvVcDXVlMES8owdHP5XC/g=\", false, function () {\n  return [useToken, useUser, useNavigate];\n});\n_c = UserInfoPage;\nvar _c;\n$RefreshReg$(_c, \"UserInfoPage\");","map":{"version":3,"names":["useEffect","useState","useNavigate","useToken","useUser","jsxDEV","_jsxDEV","UserInfoPage","_s","setToken","user","id","username","email","navigate","inputUsername","setInputUsername","inputEmail","setInputEmail","showSuccessMessage","setShowSuccessMessage","showErrorMessage","setShowErrorMessage","setTimeout","saveChanges","response","fetch","method","body","JSON","stringify","headers","e","console","log","logOut","resetValues","setInputPassword","password","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","preventDefault","onChange","target","value","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["/media/nvme0n1p3/My Projects/Full_Stack/Auth/front-end/src/pages/UserInfoPage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useToken } from '../auth/useToken';\nimport { useUser } from '../auth/useUser';\n\nexport const UserInfoPage = () => {\n  const [, setToken] = useToken();\n  const [user] = useUser();\n\n  const { id, username, email } = user;\n\n  // We'll use the navigate function to navigate the user\n  // programmatically later on (we're not using it yet)\n  const navigate = useNavigate();\n\n  // These states are bound to the values of the text inputs\n  // on the page (see JSX below).\n  const [inputUsername, setInputUsername] = useState(username);\n  const [inputEmail, setInputEmail] = useState(email);\n\n  // These state variables control whether or not we show\n  // the success and error message sections after making\n  // a network request (see JSX below).\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n\n  // This useEffect hook automatically hides the\n  // success and error messages after 3 seconds when they're shown.\n  // Just a little user interface improvement.\n  useEffect(() => {\n    if (showSuccessMessage || showErrorMessage) {\n      setTimeout(() => {\n        setShowSuccessMessage(false);\n        setShowErrorMessage(false);\n      }, 3000);\n    }\n  }, [showSuccessMessage, showErrorMessage]);\n\n  const saveChanges = async () => {\n    try {\n      const response = await fetch(`/api/users/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          username: inputUsername,\n          email: inputEmail,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const logOut = () => {\n    // We'll want to log the user out here\n    // and send them to the \"login page\"\n    setToken(null);\n    navigate('/login');\n  };\n\n  const resetValues = () => {\n    // Reset the text input values to\n    // their starting values (the data we loaded from the server)\n    setInputUsername(username);\n    setInputEmail(email);\n    setInputPassword(password);\n  };\n\n  // And here we have the JSX for our component. It's pretty straightforward\n  return (\n    <div className=\"content-container\">\n      <h1 style={{ color: 'white' }}>Info for {username}</h1>\n      {showSuccessMessage && (\n        <div className=\"success\">Successfully saved user data!</div>\n      )}\n      {showErrorMessage && (\n        <div className=\"fail\">\n          Uh oh... something went wrong and we couldn't save changes\n        </div>\n      )}\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          saveChanges();\n        }}\n      >\n        <div className=\"form-group\">\n          <input\n            onChange={(e) => setInputUsername(e.target.value)}\n            value={inputUsername}\n            type=\"text\"\n            placeholder=\"Username\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            onChange={(e) => setInputEmail(e.target.value)}\n            value={inputEmail}\n            type=\"email\"\n            placeholder=\"Email\"\n          />\n        </div>\n        <button type=\"submit\">Save Changes</button>\n        <button type=\"button\" onClick={resetValues}>\n          Reset Values\n        </button>\n        <button type=\"button\" onClick={logOut}>\n          Log Out\n        </button>\n      </form>\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}